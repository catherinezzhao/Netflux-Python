# exportPythonODE.py
# Based on exportPythonODE.m
# CZZ on 12/13/2021

# %% NOTE: THE USER MUST RUN THIS FILE TO ENTER THEIR .XLSX FILENAME***

# %% Exports system of equations to standalone .py files.

user_filename = input("Enter your .xlsx filename (e.g., exampleNet.xlsx): \n")
user_networkid = user_filename[:-5]


def exportPythonODE(speciesNames, rxnID, paramList, CNAmodel, nfilename):
    from datetime import date
    from Netflux2pythonODE import Netflux2pythonODE
    
    # Write file that defines the parameters
    w,n,EC50,tau,ymax,y0 = paramList

    # Remove .xlsx extension from nfilename
    nfilename_noxlsx = nfilename[:-5]

    commandLine2 = []
    commandLine2.append('# '+nfilename_noxlsx+'_NetfluxODE_params.py')
    commandLine2.append('# Automatically generated by Netflux on %s' %str(date.today()))
    commandLine2.append('\nimport numpy as np\n')
    commandLine2.append('def loadParams():')  
    commandLine2.append('\t# species parameters')
    commandLine2.append("\tspeciesNames = ['" + "', '".join(speciesNames) + "']")
    commandLine2.append("\ttau = np.array([" + ", ".join(str(item) for item in tau) + "], dtype=float)")
    commandLine2.append("\tymax = np.array([" + ", ".join(str(item) for item in ymax) + "], dtype=float)")
    commandLine2.append("\ty0 = np.array([" + ", ".join(str(item) for item in y0) + "], dtype=float)\n")
    commandLine2.append('\t# reaction parameters')
    commandLine2.append("\trxnID = ['" + "', '".join(rxnID) + "']")
    commandLine2.append("\tw = np.array([" + ", ".join(str(item) for item in w) + "], dtype=float)")
    commandLine2.append("\tn = np.array([" + ", ".join(str(item) for item in n) + "], dtype=float)")
    commandLine2.append("\tEC50 = np.array([" + ", ".join(str(item) for item in EC50) + "], dtype=float)")
    commandLine2.append('\treturn speciesNames, rxnID, tau, ymax, y0, w, n, EC50');
    
    # %% Write the run file that calls the params and ODEfile
    commandLine3 = []
    commandLine3.append('# ' + nfilename_noxlsx + '_NetfluxODE_run.py')
    commandLine3.append('# Automatically generated by Netflux on %s' %str(date.today()))
    commandLine3.append('\nimport numpy as np')
    commandLine3.append('import scipy.integrate')
    commandLine3.append('import scipy.interpolate')
    commandLine3.append('import matplotlib.pyplot as plt')
    commandLine3.append('import ' + nfilename_noxlsx + '_NetfluxODE')
    commandLine3.append('import ' + nfilename_noxlsx + '_NetfluxODE_params\n')
    
    commandLine3.append('# Initialize tNow, tEnd, count, tCum, yCum, tspan')
    commandLine3.append('tNow = 0')
    commandLine3.append('tEnd = 10')
    commandLine3.append('count = 0')
    commandLine3.append('tCum = []')
    commandLine3.append('yCum = []')
    commandLine3.append('tspan = [tNow, tEnd]\n')
    
    commandLine3.append('# Load parameters')
    commandLine3.append('[speciesNames, rxnID, tau, ymax, y0, w, n, EC50] = ' + nfilename_noxlsx + '_NetfluxODE_params.loadParams()\n')    
    
    commandLine3.append('def updateTend():')
    commandLine3.append('\tglobal tspan')
    commandLine3.append('\ttspan = [tNow, tNow + tEnd]\n\n')
    
    commandLine3.append('def changeParams(ID, param_type, value):')
    commandLine3.append('\tglobal tau, ymax, y0, w, n, EC50')
    commandLine3.append('\t# Change parameter values')
    commandLine3.append('\tif ID in speciesNames:')
    commandLine3.append('\t\tidx = speciesNames.index(ID)')
    commandLine3.append('\t\tif param_type == "tau":')
    commandLine3.append('\t\t\ttau[idx] = float(value)')
    commandLine3.append('\t\tif param_type == "Ymax":')
    commandLine3.append('\t\t\tymax[idx] = float(value)')
    commandLine3.append('\t\tif param_type == "Yinit":')
    commandLine3.append('\t\t\ty0[idx] = float(value)')
    commandLine3.append('\tif ID in rxnID:')
    commandLine3.append('\t\tidx = rxnID.index(ID)')
    commandLine3.append('\t\tif param_type == "Weight":')
    commandLine3.append('\t\t\tw[idx] = float(value)')
    commandLine3.append('\t\tif param_type == "n":')
    commandLine3.append('\t\t\tn[idx] = float(value)')
    commandLine3.append('\t\tif param_type == "EC50":')
    commandLine3.append('\t\t\tEC50[idx] = float(value)\n\n')
    
    commandLine3.append('def runSimulation(ID="", param_type="", value="", Multiple=False):')
    commandLine3.append('\t"""')
    commandLine3.append('\tID: This is the species ID or reaction ID --> e.g., "A" for species ID, "r2" for reaction ID')
    commandLine3.append('\tparam_type: This can be tau, Ymax, Yinit, Weight, n, or EC50    --> e.g., "Weight"')
    commandLine3.append('\tvalue: value to change it to                --> e.g., "0.5"\n')
    
    commandLine3.append('\tUsing these examples, y0 for species A would be changed to 0.5.')
    commandLine3.append('\t"""')
    commandLine3.append('\tglobal t, sol, x, y, f, yi, tNow, count, tCum, yCum')
    commandLine3.append('\tglobal tau, ymax, y0, w, n, EC50\n')

    commandLine3.append('\thave_more = True\n')

    commandLine3.append('\tchangeParams(ID, param_type, value)\n')
    
    commandLine3.append('\tif Multiple:           # multiple parameters changed during run')
    commandLine3.append('\t\twhile have_more:')
    commandLine3.append('\t\t\tusr_input = input("Change param from species or reactions sheet? (s/r) ")')
    commandLine3.append('\t\t\tif usr_input == "s":')
    commandLine3.append('\t\t\t\tID = input("Enter your next species ID: ")')
    commandLine3.append('\t\t\tif usr_input == "r":')
    commandLine3.append('\t\t\t\tID = input("Enter your next reaction ID: ")\n')
            
    commandLine3.append('\t\t\tparam_type = input("Enter next parameter column name: ")')
    commandLine3.append('\t\t\tvalue = input("Enter value for parameter: ")')
    commandLine3.append('\t\t\tmore_str = input("Have more parameters to enter? (y/n) ")')
    commandLine3.append('\t\t\tif more_str.lower() == "n":')
    commandLine3.append('\t\t\t\thave_more = False')
    commandLine3.append('\t\t\tchangeParams(ID, param_type, value)\n')
    
    commandLine3.append('\t# Solve ODEs')
    commandLine3.append('\tt = np.linspace(tNow, tspan[-1], 101)')
    commandLine3.append('\tsol = scipy.integrate.solve_ivp(' + nfilename_noxlsx + '_NetfluxODE.ODEfunc, tspan, y0, ')
    commandLine3.append('\t\t\t\t\t\t\t\targs=(tau,ymax,w,n,EC50), ')
    commandLine3.append('\t\t\t\t\t\t\t\tt_eval=t,')
    commandLine3.append('\t\t\t\t\t\t\t\tdense_output=True,')
    commandLine3.append('\t\t\t\t\t\t\t\tmethod="RK45")\n')
    
    commandLine3.append('\tx = np.linspace(tNow, tspan[-1], 101)')
    commandLine3.append('\ty = sol.y.T')
    commandLine3.append('\tf = scipy.interpolate.interp1d(t, y, kind="linear", axis=0)')
    commandLine3.append('\tyi = f(x)')
    commandLine3.append('\tt = x')
    commandLine3.append('\ty = yi\n')
    
    commandLine3.append('\ttNow = t[-1]')
    commandLine3.append('\tupdateTend()')
    commandLine3.append('\ty0 = y[-1]')
    commandLine3.append('\tif count < 1:')
    commandLine3.append('\t\ttCum = t')
    commandLine3.append('\t\tyCum = y')
    commandLine3.append('\telse:')
    commandLine3.append('\t\ttCum = np.concatenate((tCum, t[1:]))')
    commandLine3.append('\t\tyCum = np.concatenate((yCum, y[1:]))\n')
    
    commandLine3.append('\tcount += 1\n')

    commandLine3.append('#---ONLY MANIPULATE STUFF BETWEEN THESE LINES--------')
    commandLine3.append('runSimulation()')
    commandLine3.append('# runSimulation("r2","Weight","1")')
    commandLine3.append('# runSimulation("r2","Weight","0")')
    commandLine3.append('# runSimulation("r1","Weight","1")')
    commandLine3.append('# runSimulation("r1","Weight","0")')
    commandLine3.append('# runSimulation("r2","Weight","1", True)')
    commandLine3.append('# runSimulation()\n')
    
    commandLine3.append('#----------------------------------------------------')
    
    commandLine3.append('plt.plot(tCum, yCum)')
    commandLine3.append("plt.xlabel('Time')")
    commandLine3.append("plt.ylabel('Fractional Activation')")
    commandLine3.append("plt.legend(['" + "', '".join(speciesNames) + "'], shadow=True)")
    commandLine3.append("plt.title('ODE Simulation')")
    commandLine3.append('plt.show()')
    
    # %% Write the ODEfunc
    commandLine = []
    commandLine.append('# ' + nfilename_noxlsx + '_NetfluxODE.py')
    commandLine.append('# Automatically generated by Netflux on %s' %str(date.today()))
    commandLine.append('\nimport numpy as np')
    commandLine.append('def ODEfunc(t,y,tau,ymax,w,n,EC50):')
    
    # pythonODElist = util.Netflux2pythonODE(CNAmodel) # generate list of python ODEs 
    (paramList, pythonODElist, CNAerror) = Netflux2pythonODE(CNAmodel, nfilename) # generate list of python ODEs 
    for each in pythonODElist:
        commandLine.append(each)

    # %% write utility functions
    commandLine.append('\n# utility functions\n')
    commandLine.append('def act(x, w, n, EC50):')
    commandLine.append('\t# hill activation function with parameters w (weight), n (Hill coeff), EC50')
    commandLine.append('\tbeta = ((EC50**n)-1)/(2*EC50**n-1)')
    commandLine.append('\tK = (beta-1)**(1/n)')
    commandLine.append('\tfact = w*(beta*x**n)/(K**n+x**n)')
    commandLine.append('\tif fact > w:')
    commandLine.append('\t\tfact = w')
    commandLine.append('\treturn fact\n')
    
    commandLine.append('def inhib(x, w, n, EC50):')
    commandLine.append('\t# inverse hill function with parameters w (weight), n (Hill coeff), EC50')
    commandLine.append('\tfinhib = w - act(x, w, n, EC50)')
    commandLine.append('\treturn finhib\n')
    
    commandLine.append('def OR(x, y):')
    commandLine.append('\t# OR logic gate')
    commandLine.append('\tz = x + y - x*y')
    commandLine.append('\treturn z\n')
    
    commandLine.append('def AND(w, reactList):')
    commandLine.append('\t# AND logic gate, multiplying all of the reactants together')
    commandLine.append('\tif w == 0:')
    commandLine.append('\t\tz = 0')
    commandLine.append('\telse:')
    commandLine.append('\t\tp = np.array(reactList).prod()')
    commandLine.append('\t\tz = p/w**(len(reactList)-2)')   
    commandLine.append('\treturn z\n')
    

    return commandLine, commandLine2, commandLine3, nfilename_noxlsx
    

# %% ------Writing to files------
from xls2Netflux import xls2Netfluxpython

(specID, rxnID, rxnRules, paramList, ODElist, CNAmodel, ReadError) = xls2Netfluxpython(user_networkid, user_filename)

# Call above function to create commandLine, commandLine2, commandLine3 lists
(commandLine, commandLine2, commandLine3, nfilename_noxlsx) = exportPythonODE(specID, rxnID, paramList, CNAmodel, user_filename) # specID changed from speciesNames
print("\nFiles created!\n", 
      '\t', user_networkid + '_NetfluxODE.py' + '\n', 
      '\t', user_networkid + '_NetfluxODE_params.py' + '\n',
      '\t', user_networkid + '_NetfluxODE_run.py')

f = open(nfilename_noxlsx + '_NetfluxODE.py', "w")
for i in range(len(commandLine)):
    f.write(commandLine[i]+"\n")
f.close()

f = open(nfilename_noxlsx + '_NetfluxODE_params.py', "w")
for i in range(len(commandLine2)):
    f.write(commandLine2[i]+"\n")
f.close()

f = open(nfilename_noxlsx + '_NetfluxODE_run.py', "w")
for i in range(len(commandLine3)):
    f.write(commandLine3[i]+"\n")
f.close()


